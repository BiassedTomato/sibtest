// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace test.Migrations
{
    [DbContext(typeof(AppContext))]
    [Migration("20250204153427_LinkReportTypeWithShop")]
    partial class LinkReportTypeWithShop
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("IdNumber")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<Guid>("ShopId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Repair", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<DateTime?>("FinishedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Mileage")
                        .HasColumnType("real");

                    b.Property<int>("RepairStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("RepairTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ShopId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("RepairTypeId");

                    b.HasIndex("ShopId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Repairs");
                });

            modelBuilder.Entity("RepairType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ShopId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("RepairTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fb0cde33-67f3-4d60-8ba6-e6e622c2eb10"),
                            Cost = 5000f,
                            Name = "Выправление вмятин"
                        },
                        new
                        {
                            Id = new Guid("f4d40fec-ca70-4dfc-b77d-84ddd3c39548"),
                            Cost = 8000f,
                            Name = "Замена масла"
                        },
                        new
                        {
                            Id = new Guid("dc0049df-1b21-4db9-8311-f9461bb60cc4"),
                            Cost = 500000f,
                            Name = "Замена двигателя"
                        },
                        new
                        {
                            Id = new Guid("82af0c89-2070-48bb-865c-dd72fc871e94"),
                            Cost = 2500f,
                            Name = "Замена колес/покрышек"
                        },
                        new
                        {
                            Id = new Guid("23393d8d-a583-4ab1-b4fc-e4184b69c464"),
                            Cost = 800f,
                            Name = "Установка радиоприемника"
                        });
                });

            modelBuilder.Entity("Shop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("IdNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d0437a84-be08-4491-ba20-fbb901f13f7c"),
                            IdNumber = "1237873535",
                            Name = "СТО 'Акула'"
                        });
                });

            modelBuilder.Entity("Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("VehicleNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Client", b =>
                {
                    b.HasOne("Shop", "Shop")
                        .WithMany("Clients")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Repair", b =>
                {
                    b.HasOne("Client", "Client")
                        .WithMany("Repairs")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepairType", "RepairType")
                        .WithMany()
                        .HasForeignKey("RepairTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shop", "Shop")
                        .WithMany("Repairs")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("RepairType");

                    b.Navigation("Shop");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("RepairType", b =>
                {
                    b.HasOne("Shop", null)
                        .WithMany("RepairTypes")
                        .HasForeignKey("ShopId");
                });

            modelBuilder.Entity("Vehicle", b =>
                {
                    b.HasOne("Client", "Owner")
                        .WithMany("Vehicles")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Client", b =>
                {
                    b.Navigation("Repairs");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Shop", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Repairs");

                    b.Navigation("RepairTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
